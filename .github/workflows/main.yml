name: Pipeline Demo

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Take code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Run-Tests
        run: |
          pip install -r requirement.txt
          pip install pytest 
          pip install httpx
          pytest .

  deploy-stage:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Take code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to VM
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@3.86.177.103 << 'EOF'
          set -e  # Exit on any command failure

          # Ensure the directory is correct
          cd /home/ubuntu/git_test || exit 1

          # Ensure Python 3 is installed
          sudo apt update && sudo apt install -y python3 python3-venv python3-pip

          # Check if env exists, if not create it
          if [ ! -d "env" ]; then
            python3 -m venv env
          fi

          # Activate the virtual environment
          source env/bin/activate

          git pull

          # Ensure pip is installed
          python -m ensurepip --default-pip

          # Upgrade pip and install requirements (bypassing PEP 668 restrictions)
          python -m pip install --upgrade pip --break-system-packages
          python -m pip install -r requirement.txt --break-system-packages

          

          # Restart Uvicorn
          pkill uvicorn || true  # Ignore error if Uvicorn is not running

          # Start Uvicorn in the background, redirect logs, and detach process
          nohup env/bin/uvicorn main:app --host 0.0.0.0 --port 8080 > uvicorn.log 2>&1 & disown

          sudo apt install prometheus -y
          sudo systemctl enable prometheus

          sudo tee -a /etc/prometheus/prometheus.yml << 'EOF'
            - job_name: 'fastapi_app'
              metrics_path: '/metrics'
              static_configs:
                - targets: ['localhost:8080']

          sudo systemctl start prometheus 
          sudo  apt install grafana -y
          sudo systemctl enable grafana-server 
          sudo systemctl start grafana-server 


          
          EOF
